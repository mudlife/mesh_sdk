C51 COMPILER V9.53.0.0   NETSTACK_PHY                                                      07/19/2019 10:23:34 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE NETSTACK_PHY
OBJECT MODULE PLACED IN .\Objects\netstack_phy.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE phy\netstack_phy.c LARGE OPTIMIZE(6,SPEED) INCDIR(.\app;.\dev;.\os;.\inc
                    -) DEFINE(LOG,LIGHT) DEBUG OBJECTEXTEND PRINT(.\Listings\netstack_phy.lst) TABS(2) OBJECT(.\Objects\netstack_phy.obj)

line level    source

   1          /**
   2           * @file netstack_phy.c
   3           * @brief RF操作文件
   4           * @details 实现RF的初始化，寄存器读写功能
   5           * @author mudlife
   6           * @par Copyright (c):
   7           *      上海晶曦微电子科技有限公司
   8           * @version 1.0.0
   9           * @date 2019-06-02
  10           */
  11          #include "netstack_phy.h"
  12          #include "delay.h"
  13          #include "spi.h"
  14          
  15          #include "HC89S003F4.h"
  16          
  17          
  18          /// RF读操作标志
  19          #define WL1600_OP_READ      (0x80)
  20            
  21          /// 寄存器配置表结束标志
  22          #define REG_END_MARK    (255)
  23          
  24          
  25          /// 寄存器配置参数表
  26          u8 code rf_regs[][2]  = {   //小米5能收到
  27            
  28            #if 1
  29          {0,  0x6F},//6F  7F
  30          {1,  0xE8},
  31          {2,  0x52},//56  57
  32          {3,  0x0D},
  33          {4,  0xC4}, // 
  34          {8,  0x25}, //
  35          {9,  0x41},//41  14
  36          {10, 0x57},
  37          {11, 0x3B},
  38          {16, 0x86},
  39          
  40          {17,0x68},//7A
  41          {18,0x0C},
  42          //rssi
  43          {22,0x00},
  44          {84,0x05},// 01 0101
  45          //rssi end
  46          {34,0x48},//48
  47          {41,0x10},
  48          {45,0x00},
  49          {46,0x09},//0x01
  50          {52,0x19},//19
  51          {53,0x40},
  52          {64, 0x0A},//0x0A
  53          {72, 0xBE},//BE
  54          {73, 0xD6},//D6 
C51 COMPILER V9.53.0.0   NETSTACK_PHY                                                      07/19/2019 10:23:34 PAGE 2   

  55          {78, 0x8E},//8E
  56          {79, 0x89}, //89
  57          {80,0xF8},
  58          {81, 0x42},//0x44
  59          {82, 0x70},  
  60          {66, 0x08},
  61          {67, 0x00},  //A0
  62          {68,0x20},// 9C
  63          //    {69,0x0A},
  64          
  65          {255, 255} 
  66              
  67              #endif 
  68              
  69              #if 0
                  
                  {0,  0x6F},
                {1,  0xE8},
                {2,  0x56},
                {3,  0x0D},
                {4,  0xC4}, 
                {8,  0x25}, 
                {9,  0x41},
                {10, 0x57},
                {11, 0x3B},
                {16, 0x86},
              
                
                {17,0x68},
                {18,0x18},
                {34,0x09},
                {41,0x10},
                {45,0x00},
                {46,0x09},
                {52,0x19},
                {53,0x40},
              
                {64, 0x0A},
                {72, 0xBE},
                {73, 0xD6},
                {78, 0x8E},
                {79, 0x89}, 
                {80,0xF8},
                {81, 0x41},
                {82, 0x70},  
                {66, 0x08},
              
                {67, 0x00}, 
                {68,0x20},
              
                {255, 255} 
                  #endif
 107            
 108          };
 109          
 110          
 111          
 112          
 113          
 114          
 115          /**
 116           * @brief 读RF寄存器
C51 COMPILER V9.53.0.0   NETSTACK_PHY                                                      07/19/2019 10:23:34 PAGE 3   

 117           *
 118           * @param reg 要读取的寄存器地址
 119           * @return 读取到的值
 120           */
 121          u8 phy_read_reg(u8 reg)
 122          {
 123   1        data u8 val;
 124   1      //  reg_tmp = reg | WL1600_OP_READ;
 125   1        RF_SPI_SELECT();
 126   1      //  delay_us(5);
 127   1        spi_read_write(reg | WL1600_OP_READ);
 128   1        delay_us(2);
 129   1        val = spi_read_write(0xFF);
 130   1      //  delay_us(5);
 131   1        RF_SPI_DESELECT();
 132   1        return val;
 133   1      }
 134          
 135          
 136          /**
 137           * @brief 写RF寄存器
 138           *
 139           * @param reg 要写的寄存器地址
 140           * @param val 要写的值
 141           * @return 无
 142           * @par 示例:  
 143           * @code
 144           * 0号寄存器写0x6F
 145           * phy_write_reg(0,0x6F);
 146           * @endcode
 147           */
 148          void phy_write_reg(u8 reg,u8 val)
 149          {
 150   1      
 151   1        RF_SPI_SELECT();
 152   1      //  delay_us(5);
 153   1        spi_read_write(reg);
 154   1        spi_read_write(val);
 155   1      //  delay_us(5);
 156   1        RF_SPI_DESELECT();
 157   1      }
 158          
 159           
 160           /**
 161           * @brief 写RF寄存器某一位
 162           *
 163           * @param reg 要读取的寄存器地址
 164           * @param bits 写第几位
 165           * @param val 要写的值
 166           * @return 无
 167           */
 168          void phy_write_reg_bit(u8 reg,u8 bits,u8 val)
 169          {
 170   1        data u8 tmp;
 171   1        data u8 bit_val = (1 << bits);
 172   1        
 173   1        tmp = phy_read_reg(reg);
 174   1        if (val) {
 175   2            tmp |= bit_val;
 176   2        } else {
 177   2            tmp &= ~bit_val;
 178   2        }
C51 COMPILER V9.53.0.0   NETSTACK_PHY                                                      07/19/2019 10:23:34 PAGE 4   

 179   1      
 180   1        phy_write_reg(reg, tmp);
 181   1      }
 182          
 183          
 184          /**
 185           * @brief 读取RF的FIFO值
 186           * 
 187           * @param reg 寄存器    reg固定为 100
 188           * @param buf 读取缓存
 189           * @param len 读取长度
 190           * @return void
 191           * @par 示例：
 192           * @code
 193           *  从100号寄存器读取10 byte 数据
 194           *  u8 buf[10];
 195           *  rf_read_fifo(100,buf,10);
 196           * @endcode
 197           */
 198          void phy_read_fifo(u8 reg, u8 *buf, u8 len) 
 199          {
 200   1        data u8 i;
 201   1        RF_SPI_SELECT();
 202   1        delay_us(5);
 203   1        spi_read_write(reg | WL1600_OP_READ);
 204   1      
 205   1        for(i=0;i<len;i++)
 206   1          buf[i] = spi_read_write(0xFF);
 207   1        delay_us(5);
 208   1        RF_SPI_DESELECT();
 209   1      }
 210          
 211          
 212           /**
 213           * @brief 往RF FIFO中写数据
 214           *
 215           * @param reg 寄存器地址
 216           * @param buf 数据缓存地址
 217           * @param len 数据长度
 218           * @return 无
 219           */
 220          void phy_write_fifo(u8 reg, u8 *buf, u8 len) 
 221          {
 222   1        data u8 i;
 223   1        RF_SPI_SELECT();
 224   1        delay_us(5);
 225   1        spi_read_write(reg);
 226   1        for(i=0;i<len;i++)
 227   1          spi_read_write(buf[i]);
 228   1        delay_us(5);
 229   1        RF_SPI_DESELECT();
 230   1      }
 231          
 232          
 233          /**
 234           * @brief 寄存器检测
 235           *
 236           * @return 返回检测结果
 237           *   @retval REG_END_MARK 检测通过 
 238           *   @retval !REG_END_MARK 检测未通过
 239           * @see REG_END_MARK
 240           */
C51 COMPILER V9.53.0.0   NETSTACK_PHY                                                      07/19/2019 10:23:34 PAGE 5   

 241          u8 phy_check_regs(void)
 242          {
 243   1          data u8 i;
 244   1          data u8 val;
 245   1          for (i = 0; rf_regs[i][0] != REG_END_MARK; ++i) {
 246   2            if(rf_regs[i][0]==46){
 247   3            continue;
 248   3            }
 249   2              delay_ms(10);
 250   2            val = phy_read_reg(rf_regs[i][0]);
 251   2              if ( val != rf_regs[i][1]) {
 252   3                  return (i);
 253   3              }
 254   2          }
 255   1          return (REG_END_MARK);
 256   1      }
 257          
 258          
 259           /**
 260           * @brief 物理层初始化
 261           *
 262           * @return 返回初始化结果
 263           *  @retval 0 成功
 264           *  @retval !0 失败
 265           */
 266          u8 phy_init(void)
 267          {
 268   1        data u8 i;
 269   1      //  phy_pkt_flag_init();
 270   1        RF_DISABLE();
 271   1        RF_SPI_DESELECT();
 272   1      
 273   1        /* Reset WL1600 */
 274   1        RF_DISABLE();
 275   1        delay_us(50); 
 276   1        
 277   1        RF_ENABLE();
 278   1        delay_ms(5);
 279   1      //  i = phy_read_reg(1);
 280   1        /* Configure WL1600 */
 281   1        do{
 282   2          phy_write_reg(rf_regs[0][0], rf_regs[0][1]);
 283   2          i = phy_read_reg(rf_regs[0][0]);
 284   2           for (i = 0; rf_regs[i][0] != REG_END_MARK; ++i) {
 285   3             phy_write_reg(rf_regs[i][0], rf_regs[i][1]);
 286   3          }
 287   2        }while(phy_check_regs() != REG_END_MARK);
 288   1        
 289   1        return 0;
 290   1      }
 291          
 292          
 293          
 294          
 295          
 296          
 297          
 298          
 299          
 300          
 301          
 302          
C51 COMPILER V9.53.0.0   NETSTACK_PHY                                                      07/19/2019 10:23:34 PAGE 6   

 303          
 304          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    461    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =   ----      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
